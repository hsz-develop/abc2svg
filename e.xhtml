<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<script src="@PATH@/@JS@" type="text/javascript" async="true"></script>
<script src="@PATH@/play-@MAJOR@.js" type="text/javascript" async="true"></script>
<style>
	body, html {height: 90%;}
	svg {display:block}
	text tspan {white-space:pre; fill:currentColor}
	#dright:hover {z-index: 10 !important}
	#dright:active {z-index: 10 !important}
	.help { position:relative; display:inline;}
	.help>aside {
		display: none;
		position: absolute; width:400px; left:-150px; top:20px;
		background-color:#e0e0e0; font-size:small;
		border:1px solid black}
	.help:hover>aside {display:block; z-index: 20}
	@media screen {
		#dright {
			width: auto;
			position: absolute; top: 0; bottom:0; right:0;
			background-color: white;
			overflow: auto
		}
	}
	@media print {
		#dright>div {
			visibility: visible
		}
		#dleft, #dright {
			visibility: hidden
		}
	}
</style>
<title>ABC edit with abc2svg@PS@</title>

<script type="text/javascript">
<![CDATA[
var	abc_images,			// image buffer
	abc_fname = ["noname.abc", ""],	// file names
	abc,				// Abc object
	ref= [],			// source reference array
	colcl = [],			// colorized classes
	abcplay,			// play engine
	playing

// debug
function debug(msg) {
	var diverr = document.getElementById("diverr");
	diverr.innerHTML += msg + "<br/>\n"
}

// -- Abc create argument
const ignore_types = {
		beam: true,
		slur: true,
		tuplet: true
}
var user = {
	// -- required methodes
	// include a file (%%abc-include - only one)
	read_file: function(fn) {
		document.getElementById("s" + srcidx).style.display = "inline"
		return document.getElementById("src1").value
	},
	// insert the errors
	errmsg: function(msg, l, c) {
		var diverr = document.getElementById("diverr")
		if (l)
			diverr.innerHTML += '<b onclick="gotoabc(' +
				l + ',' + c +
				')" style="cursor: pointer; display: inline-block">' +
				msg + "</b><br/>\n"
		else
			diverr.innerHTML += msg + "<br/>\n"
	},
	// image output
	my_img_out: function(str) {
		abc_images += str
	},
	// -- optional methods
	// annotations
	anno_start: function(type, start, stop, x, y, w, h) {
		if (ignore_types[type])
			return
		stop -= start;
		// keep the source reference
		ref.push([start, stop]);
		// create a container for the music element
		abc.out_svg('<g class="e_' + start + '_' + stop + '_">\n')
	},
	anno_stop: function(type, start, stop, x, y, w, h) {
		if (ignore_types[type])
			return
		// close the container
		abc.out_svg('</g>\n');
		// create a rectangle
		abc.out_svg('<rect class="abcr _' + start + '_' + (stop - start) +
			'_" x="');
		abc.out_sxsy(x, '" y="', y);
		abc.out_svg('" width="' + w.toFixed(2) +
			'" height="' + h.toFixed(2) + '"/>\n')
	},
	// for playing
	get_abcmodel: function(tsfirst, voice_tb, music_types) {
		if (abcplay && playing)
			abcplay.add(tsfirst, voice_tb[0].key)
	},
	// -- optional attributes
	page_format: true		// define the non-page-breakable blocks
    },
    srcidx = 0

// -- local functions

// load the (ABC source or include) file in its textarea
function loadtune() {
	var files = document.getElementById("abcfile").files
	if (!files.length) {
		alert('Please select a file!')
		return
	}
	abc_fname[srcidx] = files[0].name

	var reader = new FileReader();

	// Closure to capture the file information
	reader.onloadend = function(e) {
		var	i, j, sl,
			content = e.target.result,
			s = srcidx == 0 ? "source" : "src1"
		document.getElementById(s).value = content;
		document.getElementById("s" + srcidx).value = abc_fname[srcidx];
		src_change()
	}

	// Read the file as text
	reader.readAsText(files[0], "UTF-8")
}

// display the source 0 or 1
function selsrc(idx) {
	if (idx == srcidx)
		return
	var	o = srcidx ? "src" + srcidx : "source",
		n = idx ? "src" + idx : "source";
	document.getElementById(o).style.display = "none";
	document.getElementById(n).style.display = "inline";
	document.getElementById("s" + srcidx).style.backgroundColor = "#ffd0d0";
	document.getElementById("s" + idx).style.backgroundColor = "#80ff80";
	srcidx = idx
}

// render the textarea content to the right side
function render() {
	var	i, j,
		target = document.getElementById("target"),
		diverr = document.getElementById("diverr"),
		content = document.getElementById("source").value
	if (!content)
		return

	// if include file not loaded yet, ask it
	i = content.indexOf('%%abc-include ')
	if (i >= 0) {
		var sl = document.getElementById("s1")
		if (!sl.value) {
			sl.style.display = "inline";
			j = content.indexOf('\n', i);
			sl.value = content.slice(i + 14, j);
			selsrc(1);
			alert('Please, load the included file ' + sl.value);
			return
		}
	}
	user.img_out = user.my_img_out;
	abc = new Abc(user);
	abc_images = '';
	abc.tosvg('edit', '%%bgcolor white\n\
%%beginsvg\n\
<style type="text/css">\n\
	rect.abcr {fill:#a08000; fill-opacity:0; z-index: 15}\n\
	rect.abcr:hover {fill-opacity:0.3}\n\
</style>\n\
%%endsvg\n');

	diverr.innerHTML = '';
//	document.body.style.cursor = "wait";
	ref = []
	try {
		abc.tosvg(abc_fname[0], document.getElementById("source").value);
	} catch(e) {
		alert(e.message + '\nabc2svg tosvg bug - stack:\n' + e.stack)
		return
	}
//	document.body.style.cursor = "default";

	try {
		target.innerHTML = abc_images
	} catch(e) {
		alert(e.message + '\nabc2svg image bug - abort')
		return
	}

	// set callbacks on all abc rectangles
	setTimeout(function(){
		var	elts = document.getElementsByClassName('abcr'),
			i = elts.length,
			elt
		while (--i >= 0) {
			elt = elts[i];
			elt.onclick = function() {selabc(this)}
			elt.onmouseover = function() {m_over(this)}
			elt.onmouseout = function() {m_out(this)}
		}
	}, 300)
}

// select a source ABC element
function gotoabc(l, c) {
	var	s = document.getElementById("source"),
		idx = 0
	while (--l >= 0) {
		idx = s.value.indexOf('\n', idx) + 1
		if (idx <= 0) {
			alert('bad line number');
			idx = s.value.length - 1;
			c = 0
			break
		}
	}
	c = Number(c) + idx;
	s.focus();
	s.setSelectionRange(c, c + 1)
}

function setcolor(cl, color) {
	var	elts = document.getElementsByClassName(cl),
		i = elts.length,
		elt
	while (--i >= 0) {
		elt = elts[i];
		elt.setAttribute("color", color)
	}
}

// highlight the music elements on mouse over
// 'me' is the rectangle
function m_over(me) {
	var	cl = me.getAttribute('class');
	setcolor(cl.replace('abcr ', 'e'), "#ff0000")
}
function m_out(me) {
	var	cl = me.getAttribute('class');
	setcolor(cl.replace('abcr ', 'e'), "black")
}

// select the ABC element when click on a SVG 'abcr' rectangle
function selabc(me) {
	var	c = me.getAttribute('class'),
		d_s_l_d = c.split('_'),
		i1 = Number(d_s_l_d[1]),
		i2 = i1 + Number(d_s_l_d[2]),
		s = document.getElementById("source");
	s.focus();
	s.setSelectionRange(i1, i2);

// does not work
//	s = document.getElementById("dright");
//	s.style.zindex = 0
}

// colorize the selection
function colorsel(color) {
	var i, n = colcl.length
	for (i = 0; i < n; i++)
		setcolor(colcl[i], color)
}

// source text selection callback
function seltxt(elt) {
	var	i, n, o, start, end
	if (colcl.length != 0) {
		colorsel("black");
		colcl = []
	}
	if (elt.selectionStart == undefined)
		return
	start = elt.selectionStart;
	end = elt.selectionEnd
	if (start == 0
	 && end == document.getElementById("source").value.length)
		return				// select all
	n = ref.length
	for (i = 0; i < n; i++) {
		o = ref[i][0]
		if (o >= start && o < end)
			colcl.push('e_' + o + '_' + ref[i][1] + '_')
	}
	if (colcl.length != 0) {
		colorsel("#ff0000")
		var s = document.getElementById("dright")
     var z = window.document.defaultView.getComputedStyle(s).getPropertyValue('z-index')
//console.log("zindex " + z)
		if (z != 10) {			// if select from textarea
			var elts = document.getElementsByClassName(colcl[0]);
			elts[0].scrollIntoView()	// move the element on the screen
		}
	}
}

// open a new window for file save
function saveas() {      
	var	s = srcidx == 0 ? "source" : "src1",
		source = document.getElementById(s).value,

	// create a Blob (html5 magic) that contains the ABC source
		blob = new Blob([source, '\n% Created by abc2svg editor'],
				{type:'text/plain;charset=UTF-8"'}),

	// create a link for our script to 'click'
		link = document.createElement("a");

	document.getElementById("s" + srcidx).value =
		link.download =
			abc_fname[srcidx] = prompt('File name: ',
						abc_fname[srcidx]);
	link.innerHTML = "Hidden Link";	

	// allow the code to work in webkit & Gecko based browsers
	// without the need for a if / else block.
//jfm:window.URL is well defined in dwb (base webkit)
//	window.URL = window.URL || window.webkitURL;
          
	// Create the link Object.
	if (typeof saveURL != 'undefined')
		window.URL.revokeObjectURL(saveURL);
	saveURL = window.URL.createObjectURL(blob);
	link.href = saveURL;

	// open in a new tab for dwb
	link.target = '_blank';

	// when link is clicked call a function to remove it from
	// the DOM in case user wants to save a second file.
	link.onclick = destroyClickedElement;

	// make sure the link is hidden.
	link.style.display = "none";

	// add the link to the DOM
	document.body.appendChild(link);
    
	// click the new link
	link.click()
}

// destroy the clicked element
function destroyClickedElement(event) {
	document.body.removeChild(event.target);
}

// set the size of the font of the textarea
function setfont() {
	var	i = document.getElementById("fontsize");
	document.getElementById("source").style.fontSize = i.value.toString() + "px";
	document.getElementById("src1").style.fontSize = i.value.toString() + "px"
}

// playing
//fixme: do tune/start-stop selection of what to play 
function endplay() {
	document.getElementById("playbutton").setAttribute("value", "Play");
	playing = false
}
function play_tune() {
	if (playing) {
		abcplay.stop();
		endplay()
		return
	}
	delete user.img_out
	var abc = new Abc(user);
	playing = true;			// get the schema and stop SVG generation
	abcplay.clear()			// clear all playing events
	try {
		abc.tosvg(abc_fname[0], document.getElementById("source").value);
	} catch(e) {
		alert(e.message + '\nabc2svg tosvg bug - stack:\n' + e.stack);
		playing = false
		return
	}
	document.getElementById("playbutton").setAttribute("value", "Stop");
	abcplay.play(0, 100000)		// play all events
}

// set the version and initialize the playing engine
function edit_init() {
	if (typeof abc2svg != "object"
	 || !abc2svg.version
	 || typeof AbcPlay != "function") {
		setTimeout(edit_init, 500)
		return
	}
	document.getElementById("abc2svg").innerHTML =
		'abc2svg-' + abc2svg.version + ' (' + abc2svg.vdate + ')';
	abcplay = new AbcPlay(endplay)
	if (!abcplay.play) {
		delete abcplay;
//		document.getElementById("playbutton").style.display = "none"
		document.getElementById("playdiv").style.display = "none"
	}
}

// drag and drop
function drag_over(ev) {
	ev.stopPropagation();
	ev.preventDefault()	// allow drop
}
function dropped(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	// check if text
	var data = evt.dataTransfer.getData("text")
	if (data) {
		evt.target.value = data;
		src_change()
		return
	}
	// check if file
	data = evt.dataTransfer.files // FileList object.
	if (data.length != 0) {
		var reader = new FileReader();
		reader.onload = function(event) {
			document.getElementById('source').value =
					event.target.result
			src_change()
		}
		reader.readAsText(data[0],"UTF-8")
		return
	}
	return
}

// render the music after 2 seconds on textarea change
var timer
function src_change(evt) {
	clearTimeout(timer);
	timer = setTimeout(render, 2000)
}

setTimeout(edit_init, 500)
]]>
</script>

</head>
<body ontouchstart="">

<!-- left -->
<div id="dleft" style="width: auto;
	position: absolute; top: 0; bottom:0; left: 0;
	background-color:#faf0e6;
	z-index: 2;
	overflow: auto;">

<h4 style="text-align: center">ABC web editor@PS@</h4>

<!-- buttons -->
Font size:
<input type="number" id="fontsize" min="10" max="20" value="14" onchange="setfont()"/>

<input id="saveas" type="button" value="Save"/>
<!-- <input id="render" type="button" value="Render the tunes"/> -->
<!-- help -->
<div class="help">Help
<aside>
<ul>
<li>You may either:
    <ul>
	<li>directly write ABC code in the text area, or</li>
	<li>paste ABC code in the text area, or</li>
	<li>load a local ABC file ('Load a ABC file' button), or</li>
	<li>drag &amp; drop a local file from your file manager
		or a selected text to the text area.</li>
    </ul></li>
<li>You may change at will the ABC code in the text area.<br/>
	Rendering is done 2 seconds later.</li>
<!-- <li>Click on 'Render the tunes' to render the tunes
	on the right side of the page.</li> -->
<li>The 'Print' of the browser outputs the rendering area.</li>
</ul>
</aside>
</div>
<br/>
<div id="playdiv">
General volume:
<input id="gvol" type="range" min="1" max="10" value="7"
	onchange="abcplay.set_g_vol(this.value / 10)"/>
<input id="playbutton" type="button" value="Play"/>
<br/>
Oscillator volume:
<input id="ovol" type="range" min="1" max="8" value="2"
	onchange="abcplay.set_o_vol(this.value / 10)"/>
</div>
<input id="s0" type="button" style="display: inline; background-color: #80ff80"
	value="(noname)"/>
<input id="s1" type="button" style="display: none; background-color: #ffd0d0"
	value=""/>
<input type="file" id="abcfile" accept="text/*"
	style="display:none" onchange="loadtune()"/>
<label for="abcfile">Load a ABC file</label>

<!-- ABC source in textarea (main and include) -->
<br/>
<textarea id="source" rows="32" cols="72"
	onselect="seltxt(this)"
	ondrop="dropped(event)" ondragenter="drag_over(event)"
	ondragover="drag_over(event)"
	style="font-family: monospace; font-size: 14px"></textarea>
<textarea id="src1" rows="32" cols="72"
	style="font-family: monospace; font-size: 14px; display: none"></textarea>

<!-- errors -->
<font color="red" background-color="white">
<div id="diverr"
	style="height: 100px; width: 100%; overflow-y: auto">
</div>
</font>
<p id="abc2svg">abc2svg</p>
</div>

<!-- right - needed for the scrollbars -->
<div id="dright">

<!-- rendering area -->
<div id="target" class="target">
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xml:space="preserve"
	width="8.3in" height="2in" viewBox="0 0 595 144">
<title>(empty)</title>
<text x="250" y="100" font-family="serif" font-size="12">(empty)</text>
</svg>
</div>
</div>

<script type="text/javascript">
// the click callbacks must be defined after XHTML parsing
	var e = document.getElementById("saveas");
	e.addEventListener("click", saveas);
	e = document.getElementById("playbutton");
	e.addEventListener("click", play_tune);
//	e = document.getElementById("render");
//	e.addEventListener("click", render);
	e = document.getElementById("s0");
	e.addEventListener("click", function(){selsrc(0)});
	e = document.getElementById("s1");
	e.addEventListener("click", function(){selsrc(1)});
	e = document.getElementById("source");
	e.addEventListener("keyup", src_change)
	e.addEventListener("paste", src_change)
	e = document.getElementById("src1");
	e.addEventListener("keyup", src_change)
	e.addEventListener("paste", src_change)
</script>

</body>
</html>
